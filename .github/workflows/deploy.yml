name: Deploy to ECS and Vercel

on:
  push:
    branches:
      - main  # Change to your deployment branch if necessary

jobs:
  deploy-to-ecs:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Build the Docker image for the backend
          docker build -t my-backend ./backend
          # Tag the image for ECR
          docker tag my-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend:latest
          # Push the image to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: my-backend-service
          cluster: my-backend-cluster
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy-to-vercel:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: deploy-to-ecs

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Navigate to the frontend directory
          cd ./frontend
          # Deploy to Vercel
          vercel --prod --token $VERCEL_TOKEN
